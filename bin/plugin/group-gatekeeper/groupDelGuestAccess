#! /usr/bin/env perl
# vim: set filetype=perl ts=4 sw=4 sts=4 et:
use common::sense;

use File::Basename;
use lib dirname(__FILE__) . '/../../../lib/perl';
use OVH::Result;
use OVH::Bastion;
use OVH::Bastion::Plugin qw( :DEFAULT help );
use OVH::Bastion::Plugin::groupSetRole;
use OVH::Bastion::Plugin::ACL;

my $remainingOptions = OVH::Bastion::Plugin::begin(
    argv               => \@ARGV,
    header             => "remove access from one server of a group from an account",
    userAllowWildcards => 1,
    options            => {
        "group=s"   => \my $group,
        "account=s" => \my $account,
        "user-any"  => \my $userAny,
        "port-any"  => \my $portAny,
        "scpup"     => \my $scpUp,
        "scpdown"   => \my $scpDown,
        "sftp"      => \my $sftp,
        "rsync"     => \my $rsync,
    },
    helptext => <<'EOF',
Remove a specific group server access from an account

Usage: --osh SCRIPT_NAME --group GROUP --account ACCOUNT [OPTIONS]

  --group GROUP            Specify which group to remove the guest access to ACCOUNT from
  --account ACCOUNT        Bastion account remove the guest access from
  --host HOST|IP|NET/CIDR  Host(s) to remove access from, either a HOST which will be resolved to an IP immediately,
                             or an IP, or a whole network using the NET/CIDR notation
  --user USER              Specify which remote user was allowed to connect as.
                             Globbing characters '*' and '?' are supported, so you can specify a pattern
                             that will be matched against the actual remote user name.
  --user-any               Synonym of '--user *', allowed connecting as any remote user.
  --port PORT              Remote port that was allowed to connect to
  --port-any               Use when access was allowed to any remote port
  --scpup                  Remove SCP upload right, you--bastion-->server (omit --user in this case)
  --scpdown                Remove SCP download right, you<--bastion--server (omit --user in this case)
  --sftp                   Remove usage of the SFTP subsystem, you<--bastion-->server (omit --user in this case)
  --rsync                  Remove usage of rsync through the bastion

This command removes, from an existing bastion account, access to a given server, using the
egress keys of the group. The list of such servers is given by ``groupListGuestAccesses``

If you want to remove member access from an account to all the present and future servers
of the group, using the group key, please use ``groupDelMember`` instead.

If you want to remove access from an account from a group server but using their personal bastion
key instead of the group key, please use ``accountDelPersonalAccess`` instead.

This command is the opposite of ``groupAddGuestAccess``.
EOF
);

my $fnret;

if (not $ip and $host) {
    osh_exit 'ERR_INVALID_HOST',
      "Specified host ($host) didn't resolve correctly, fix your DNS or specify the IP instead";
}

$fnret = OVH::Bastion::Plugin::ACL::check(
    user    => $user,
    userAny => $userAny,
    port    => $port,
    portAny => $portAny,
    scpUp   => $scpUp,
    scpDown => $scpDown,
    sftp    => $sftp,
    rsync   => $rsync,
);
if (!$fnret) {
    help();
    osh_exit($fnret);
}
$user = $fnret->value->{'user'};

$fnret = OVH::Bastion::Plugin::groupSetRole::act(
    account        => $account,
    group          => $group,
    action         => 'del',
    type           => 'guest',
    user           => $user,
    userAny        => $userAny,
    port           => $port,
    portAny        => $portAny,
    host           => ($ip || $host),
    sudo           => 0,
    silentoverride => 0,
    self           => $self,
    scriptName     => $scriptName,
    savedArgs      => $savedArgs
);
help() if not $fnret;
osh_exit($fnret);
